import logging\nfrom contextlib import asynccontextmanager\nimport anyio\nfrom anyio.streams.memory import MemoryObjectReceiveStream, MemoryObjectSendStream\nfrom starlette.websockets import WebSocket\nfrom mcp_python.types import JSONRPCMessage\n\nlogger = logging.getLogger(__name__)\n\n@asynccontextmanager\ndef websocket_server(scope, receive, send):\n    """\n    WebSocket server transport for MCP. This is an ASGI application, suitable to be used with a framework like Starlette and a server like Hypercorn.\n    """\n    websocket = WebSocket(scope, receive, send)\n    await websocket.accept(subprotocol='mcp')\n    \n    read_stream: MemoryObjectReceiveStream[JSONRPCMessage | Exception] = MemoryObjectReceiveStream()\n    read_stream_writer: MemoryObjectSendStream[JSONRPCMessage | Exception] = MemoryObjectSendStream()\n    anyio.create_memory_object_stream(0, read_stream_writer, read_stream)\n    \n    write_stream: MemoryObjectSendStream[JSONRPCMessage] = MemoryObjectSendStream()\n    write_stream_reader: MemoryObjectReceiveStream[JSONRPCMessage] = MemoryObjectReceiveStream()\n    anyio.create_memory_object_stream(0, write_stream, write_stream_reader)\n    \n    async def ws_reader():\n        try:\n            async with read_stream_writer:\n                async for message in websocket.iter_json():\n                    try:\n                        client_message = JSONRPCMessage.model_validate(message)\n                    except Exception as exc:\n                        await read_stream_writer.send(exc)\n                        continue\n                    await read_stream_writer.send(client_message)\n        except anyio.ClosedResourceError:\n            await websocket.close()\n    \n    async def ws_writer():\n        try:\n            async with write_stream_reader:\n                async for message in write_stream_reader:\n                    obj = message.model_dump(by_alias=True, exclude_none=True)\n                    await websocket.send_json(obj)\n        except anyio.ClosedResourceError:\n            await websocket.close()\n    \n    async with anyio.create_task_group() as tg:\n        tg.start_soon(ws_reader)\n        tg.start_soon(ws_writer)\n        yield (read_stream, write_stream)