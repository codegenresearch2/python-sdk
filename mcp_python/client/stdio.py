import sys\nfrom contextlib import asynccontextmanager\n\nimport anyio\nimport anyio.lowlevel\nfrom anyio.streams.memory import MemoryObjectReceiveStream, MemoryObjectSendStream\nfrom anyio.streams.text import TextReceiveStream\nfrom pydantic import BaseModel, Field\n\nfrom mcp_python.types import JSONRPCMessage\n\n\nclass StdioServerParameters(BaseModel):\n    command: str\n    \"\"\"The executable to run to start the server.\"\"\",\n    \n    args: list[str] = Field(default_factory=list)\n    \"\"\"Command line arguments to pass to the executable.\"\"\",\n    \n    env: dict[str, str] = Field(default_factory=dict)\n    \"\"\"\n    The environment to use when spawning the process.\n    \n    The environment is NOT inherited from the parent process by default.\n    \"\"\"\n\n@asynccontextmanager\nasync def stdio_client(server: StdioServerParameters):\n    \"\"\"\n    Client transport for stdio: this will connect to a server by spawning a process and communicating with it over stdin/stdout.\n    \"\"\"\n    read_stream: MemoryObjectReceiveStream[JSONRPCMessage | Exception]\n    read_stream_writer: MemoryObjectSendStream[JSONRPCMessage | Exception]\n    \n    write_stream: MemoryObjectSendStream[JSONRPCMessage]\n    write_stream_reader: MemoryObjectReceiveStream[JSONRPCMessage]\n    \n    read_stream_writer, read_stream = anyio.create_memory_object_stream(0)\n    write_stream, write_stream_reader = anyio.create_memory_object_stream(0)\n    \n    process = await anyio.open_process(\n        [server.command, *server.args], env=server.env, stderr=sys.stderr\n    )\n    \n    async def stdout_reader():\n        assert process.stdout, "Opened process is missing stdout"\n        \n        try:\n            async with read_stream_writer:\n                buffer = ""\n                async for chunk in TextReceiveStream(process.stdout):\n                    lines = (buffer + chunk).split("\n")\n                    buffer = lines.pop()\n                    \n                    for line in lines:\n                        try:\n                            message = JSONRPCMessage.model_validate_json(line)\n                        except Exception as exc:\n                            await read_stream_writer.send(exc)\n                            continue\n                        \n                            await read_stream_writer.send(message)\n        except anyio.ClosedResourceError:\n            await anyio.lowlevel.checkpoint()\n    \n    async def stdin_writer():\n        assert process.stdin, "Opened process is missing stdin"\n        \n        try:\n            async with write_stream_reader:\n                async for message in write_stream_reader:\n                    json = message.model_dump_json(by_alias=True, exclude_none=True)\n                    await process.stdin.send((json + "\n").encode())\n        except anyio.ClosedResourceError:\n            await anyio.lowlevel.checkpoint()\n    \n    async with (\n        anyio.create_task_group() as tg,\n        process,\n    ):\n        tg.start_soon(stdout_reader)\n        tg.start_soon(stdin_writer)\n        yield read_stream, write_stream\n